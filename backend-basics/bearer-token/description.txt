Middleware Implementation for Logging and Bearer Token Authentication

1. Server Setup:
   - Uses the express framework to create a web server.
   - Server listens on port 3010 and logs a message when running.

2. Logging Middleware (logger):
   - Captures and logs every incoming HTTP request.
   - Logs include:
     - Timestamp in ISO format.
     - HTTP method (GET, POST, etc.).
     - Requested URL.
   - Ensures visibility of all traffic for debugging or monitoring purposes.
   - Applied globally using app.use(logger), so it runs before every route handler.

3. Bearer Token Authentication Middleware (authenticateToken):
   - Secures protected routes by checking the Authorization header.
   - Expected format: Bearer mysecrettoken.
   - Workflow:
     1. Checks if the Authorization header exists; if not, returns HTTP 401 Unauthorized.
     2. Splits the header to extract the token.
     3. Compares the token against the expected value (mysecrettoken).
     4. If the token is invalid, returns HTTP 403 Forbidden.
     5. If valid, calls next() to proceed to the route handler.

4. Routes:
   - /public:
     - No authentication required.
     - Responds with a JSON message: "This is a public route, no token required."
   - /protected:
     - Uses authenticateToken middleware.
     - Accessible only if a valid token is provided.
     - Responds with a JSON message: "Welcome! You accessed a protected route."

5. Middleware Flow:
   - Every request passes through logger first.
   - If the route is /protected, the authenticateToken middleware runs next.
   - If authentication passes, the request reaches the route handler.

6. Server Start:
   - app.listen(PORT, ...) starts the server.
   - Logs "Server running on http://localhost:3010" to indicate readiness.

7. Purpose and Use Case:
   - Demonstrates Express middleware usage for logging and authentication.
   - Provides a basic example of public vs protected routes.
   - Useful for learning token-based authentication without external libraries like JWT.
